//*****************************************************************************
//Title		:src/FEM/Controller/ShapeFunction.h
//Author	:Tanabe Yuta
//Date		:2019/10/12
//Copyright	:(C)2019 TanabeYuta
//*****************************************************************************


#pragma once
#include <vector>


#include "../../LinearAlgebra/Models/Matrix.h"


namespace PANSFEM2 {
	//********************8NodesIsoParametricElement********************
	template<class T>
	Matrix<T> dNdr8I3(std::vector<T>& _r) {
		Matrix<T> dNdr = Matrix<T>(3, 8);
		dNdr(0, 0) = -0.125*(1.0 - _r[1])*(1.0 - _r[2]);	dNdr(0, 1) = 0.125*(1.0 - _r[1])*(1.0 - _r[2]);		dNdr(0, 2) = 0.125*(1.0 + _r[1])*(1.0 - _r[2]);		dNdr(0, 3) = -0.125*(1.0 + _r[1])*(1.0 - _r[2]);
		dNdr(0, 4) = -0.125*(1.0 - _r[1])*(1.0 + _r[2]);	dNdr(0, 5) = 0.125*(1.0 - _r[1])*(1.0 + _r[2]);		dNdr(0, 6) = 0.125*(1.0 + _r[1])*(1.0 + _r[2]);		dNdr(0, 7) = -0.125*(1.0 + _r[1])*(1.0 + _r[2]);

		dNdr(1, 0) = -0.125*(1.0 - _r[2])*(1.0 - _r[0]);	dNdr(1, 1) = -0.125*(1.0 - _r[2])*(1.0 + _r[0]);	dNdr(1, 2) = 0.125*(1.0 - _r[2])*(1.0 + _r[0]);		dNdr(1, 3) = 0.125*(1.0 - _r[2])*(1.0 - _r[0]);
		dNdr(1, 4) = -0.125*(1.0 + _r[2])*(1.0 - _r[0]);	dNdr(1, 5) = -0.125*(1.0 + _r[2])*(1.0 + _r[0]);	dNdr(1, 6) = 0.125*(1.0 + _r[2])*(1.0 + _r[0]);		dNdr(1, 7) = 0.125*(1.0 + _r[2])*(1.0 - _r[0]);

		dNdr(2, 0) = -0.125*(1.0 - _r[0])*(1.0 - _r[1]);	dNdr(2, 1) = -0.125*(1.0 + _r[0])*(1.0 - _r[1]);	dNdr(2, 2) = -0.125*(1.0 + _r[0])*(1.0 + _r[1]);	dNdr(2, 3) = -0.125*(1.0 - _r[0])*(1.0 + _r[1]);
		dNdr(2, 4) = 0.125*(1.0 - _r[0])*(1.0 - _r[1]);		dNdr(2, 5) = 0.125*(1.0 + _r[0])*(1.0 - _r[1]);		dNdr(2, 6) = 0.125*(1.0 + _r[0])*(1.0 + _r[1]);		dNdr(2, 7) = 0.125*(1.0 - _r[0])*(1.0 + _r[1]);
		return dNdr;
	}
}